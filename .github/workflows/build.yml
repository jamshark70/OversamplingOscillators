name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install 7Zip (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose

    - name: Get SC source code
      run: git clone https://github.com/supercollider/supercollider.git ${{github.workspace}}/supercollider

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSC_PATH=${{github.workspace}}/supercollider

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 



# on:
#   push:
#     tags:
#       - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:

#     runs-on: ${{matrix.os}}
#     strategy:
#       matrix:
#         os: [macos-latest, ubuntu-18.04, windows-latest]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Get SC source code
#       run: git clone https://github.com/supercollider/supercollider.git ${{github.workspace}}/supercollider

#     - name: Create Build Environment
#       # Some projects don't allow in-source building, so create a separate build directory
#       # We'll use this as our working directory for all subsequent commands
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#     - name: Configure CMake (Unix)
#       shell: bash
#       if: matrix.os != 'windows-latest'
#       working-directory: ${{github.workspace}}/build
#       run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}/supercollider

#     - name: Configure CMake (Windows)
#       if: matrix.os == 'windows-latest'
#       shell: pwsh
#       working-directory: ${{github.workspace}}\build
#       run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}\supercollider

#     - name: Build (Unix)
#       if: matrix.os != 'windows-latest'
#       working-directory: ${{github.workspace}}/build
#       shell: bash
#       run: cmake --build . --config "Release"

#     - name: Build (Windows)
#       working-directory: ${{github.workspace}}\build
#       if: matrix.os == 'windows-latest'
#       shell: pwsh
#       run: cmake --build . --config "Release"
